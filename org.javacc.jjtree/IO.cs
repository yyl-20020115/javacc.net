using System;
using System.IO;
using System.Text;
using org.javacc.parser;

namespace org.javacc.jjtree;

public class IO
{
	private string ifn;
	private string ofn;
	private TextReader reader;
	private TextWriter writer;
	private TextWriter message;
	private TextWriter error;

	internal virtual void Write(string text)
	{
		writer.Write(text);
	}

	internal virtual void WriteLine()
	{
		writer.WriteLine();
	}

	internal virtual TextWriter Out => writer;

	internal virtual string OutputFileName => ofn;


	internal virtual void WriteLine(string text) => writer.WriteLine(text);


	private string CreateOutputFileName(string P_0)
	{
		string text = JJTreeOptions.OutputFile;
		if (string.Equals(text, ""))
		{
			int num = (P_0.LastIndexOf(Path.DirectorySeparatorChar));
			if (num >= 0)
			{
				P_0 = P_0.Substring(num + 1);
			}
			int num2 = (P_0.LastIndexOf((char)46));
			if (num2 == -1)
			{
				text = new StringBuilder().Append(P_0).Append(".jj").ToString();
			}
			else
			{
				string @this = P_0.Substring(num2);
				text = (!string.Equals(@this, ".jj"))
					? (P_0.Substring(0, num2) + (".jj"))
					: P_0 + ".jj";
			}
		}
		return text;
	}


	internal IO()
	{
		ifn = "<uninitialized input>";
		message = Console.Out;
		error = Console.Error;
	}

	internal virtual string InputFileName => ifn;

	internal virtual TextReader In => reader;

	internal virtual TextWriter Msg => message;

	internal virtual TextWriter Err => error;


	internal virtual void CloseAll()
	{
		if (writer != null)
		{
			writer.Close();
		}
		if (message != null)
		{
			message.Flush();
		}
		if (error != null)
		{
			error.Flush();
		}
	}


	internal virtual void SetInput(string P_0)
	{
		NullReferenceException ex2;
		IOException ex5;
		try
		{
			try
			{
				try
				{
					try
					{
						FileInfo file = new FileInfo(P_0);
						if (!file.Exists)
						{
							string text = new StringBuilder().Append("File ").Append(P_0).Append(" not found.")
								.ToString();
							//
							throw new JJTreeIOException(text);
						}
						var d = new DirectoryInfo(P_0);
						if (d.Exists)
						{
							string text2 = new StringBuilder().Append(P_0).Append(" is a directory. Please use a valid file name.").ToString();
							//
							throw new JJTreeIOException(text2);
						}
						if (JavaCCGlobals.isGeneratedBy("JJTree", P_0))
						{
							string text3 = new StringBuilder().Append(P_0).Append(" was generated by jjtree.  Cannot run jjtree again.").ToString();
							//
							throw new JJTreeIOException(text3);
						}
						ifn = file.FullName;
						reader = new StreamReader(ifn);
						return;
					}
					catch (System.Exception x)
					{
						NullReferenceException ex = x as NullReferenceException;
						if (ex == null)
						{
							throw;
						}
						ex2 = ex;
					}
				}
				catch (System.Exception)
				{
					goto IL_00de;
				}
			}
			catch (FileNotFoundException)
			{
				goto IL_00e1;
			}
		}
		catch (IOException x2)
		{
			ex5 = x2;
			goto IL_00e4;
		}
		NullReferenceException @this = ex2;
		string text4 = (@this.Message);
		//
		throw new JJTreeIOException(text4);
	IL_00e4:
		IOException this2 = ex5;
		string text5 = (this2.Message);
		//
		throw new JJTreeIOException(text5);
	IL_00e1:

		string text6 = new StringBuilder().Append("File ").Append(P_0).Append(" not found.")
			.ToString();
		//
		throw new JJTreeIOException(text6);
	IL_00de:

		string text7 = new StringBuilder().Append("Security violation while trying to open ").Append(P_0).ToString();
		//
		throw new JJTreeIOException(text7);
	}


	internal virtual void SetOutput()
	{
		try
		{
			JavaCCGlobals.createOutputDir(JJTreeOptions.JJTreeOutputDirectory);
			//
			FileInfo file = new FileInfo(Path.Combine(JJTreeOptions.JJTreeOutputDirectory.FullName, CreateOutputFileName(ifn)));
			ofn = file.ToString();
			writer = new StreamWriter(file.FullName);
			return;
		}
		catch (IOException)
		{
		}

		string text = new StringBuilder().Append("Can't create output file ").Append(ofn).ToString();
		//
		throw new JJTreeIOException(text);
	}
}
